// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace RouteService.FlightsServiceClient
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Flightsservice.
    /// </summary>
    public static partial class FlightsserviceExtensions
    {
            /// <summary>
            /// Gets airline information by its alias.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='alias'>
            /// </param>
            public static IList<Airline> ApiAirlineByAliasGet(this IFlightsservice operations, string alias)
            {
                return operations.ApiAirlineByAliasGetAsync(alias).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets airline information by its alias.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='alias'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Airline>> ApiAirlineByAliasGetAsync(this IFlightsservice operations, string alias, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAirlineByAliasGetWithHttpMessagesAsync(alias, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Searches for airports by a provided pattern.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pattern'>
            /// </param>
            public static IList<Airport> ApiAirportSearchGet(this IFlightsservice operations, string pattern = default(string))
            {
                return operations.ApiAirportSearchGetAsync(pattern).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Searches for airports by a provided pattern.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='pattern'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Airport>> ApiAirportSearchGetAsync(this IFlightsservice operations, string pattern = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiAirportSearchGetWithHttpMessagesAsync(pattern, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Searches for all routes from a given airport.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='airport'>
            /// </param>
            public static IList<Route> ApiRouteOutgoingGet(this IFlightsservice operations, string airport = default(string))
            {
                return operations.ApiRouteOutgoingGetAsync(airport).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Searches for all routes from a given airport.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='airport'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Route>> ApiRouteOutgoingGetAsync(this IFlightsservice operations, string airport = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiRouteOutgoingGetWithHttpMessagesAsync(airport, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
